{"/home/travis/build/npmtest/node-npmtest-waterlock/test.js":"/* istanbul instrument in package npmtest_waterlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-waterlock/lib.npmtest_waterlock.js":"/* istanbul instrument in package npmtest_waterlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_waterlock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_waterlock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-waterlock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-waterlock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_waterlock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_waterlock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_waterlock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_waterlock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_waterlock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_waterlock.__dirname + '/lib.npmtest_waterlock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/index.js":"/**\n * waterlock\n * Copyright(c) 2014 David Rivera <david.r.rivera193@gmail.com>\n * MIT Licensed\n */\nmodule.exports = require('./lib'); ","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/index.js":"'use strict';\n\nvar Waterlock = require('./waterlock');\n\n// check if waterlock is already attached\n// if not create a new instance \nif(!global.hasOwnProperty('waterlock')){\n  global.waterlock = new Waterlock(); \n}\n\n// EXPORT IT!\nmodule.exports = global.waterlock;","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/waterlock.js":"'use strict';\n\nvar _ = require('lodash');\nvar util = require('util');\nvar events = require('events');\n\nmodule.exports = Waterlock;\n\n/**\n * Creates a waterlock instance\n */\nfunction Waterlock(){\n  events.EventEmitter.call(this);\n\n  this.sails      = global.sails; \n\n  this.engine     = _.bind(this.engine, this)();\n  this.config     = _.bind(this.config, this)();\n  this.methods    = _.bind(this.methods, this)().collect();\n  this.models     = _.bind(this.models, this)();\n  this.actions    = _.bind(this.actions, this)();\n  this.cycle      = _.bind(this.cycle, this)();\n\n  // expose jwt so the implementing \n  // app doesn't need to require it.\n  this.jwt        = require('jwt-simple');\n\n  this.validator  = _.bind(this.validator, this)();\n}\n\nutil.inherits(Waterlock, events.EventEmitter);\n\nWaterlock.prototype.__defineGetter__('Auth', function(){\n  return this.sails.models['auth'];\n});\n\nWaterlock.prototype.__defineGetter__('User', function(){\n  return this.sails.models['user'];\n});\n\nWaterlock.prototype.__defineGetter__('Attempt', function(){\n  return this.sails.models['attempt'];\n});\n\nWaterlock.prototype.__defineGetter__('Use', function(){\n  return this.sails.models['use'];\n});\n\nWaterlock.prototype.__defineGetter__('Jwt', function(){\n  return this.sails.models['jwt'];\n});\n\nWaterlock.prototype.__defineGetter__('waterlocked', function(){\n  return this.actions.waterlocked;\n});\n\nWaterlock.prototype.engine = require('./engine');\n\nWaterlock.prototype.config = require('./config');\n\nWaterlock.prototype.methods = require('./methods');\n\nWaterlock.prototype.models = require('./models');\n\nWaterlock.prototype.actions = require('./controllers');\n\nWaterlock.prototype._utils = require('./utils');\n\nWaterlock.prototype.logger = require('./logger');\n\nWaterlock.prototype.cycle = require('./cycle');\n\nWaterlock.prototype.validator = require('./validator');","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/engine.js":"'use strict';\n\n/**\n * This engine is responsible for \n * finding, creating and updating auth objects\n * \n * @return {Object} engine functions\n */\nmodule.exports = function(){\n\tvar waterlock = this;\n  \n\treturn {\n\n    /**\n     * Simple wrapper for Auth find/populate method\n     * \n     * @param  {Object}   criteria should be id to find the auth by\n     * @param  {Function} cb         function to be called when the auth has been\n     *                               found or an error has occurred \n     * @api public                          \n     */\n    findAuth: function(criteria, cb){\n      var self = this;\n      waterlock.Auth.findOne(criteria).populate('user')\n      .exec(function(err, auth){\n        cb(err, self._invertAuth(auth));\n      });\n    },\n\n    /**\n     * This will create a user and auth object if one is not found\n     * \n     * @param  {Object}   criteria   should be id to find the auth by\n     * @param  {Object}   attributes auth attributes\n     * @param  {Function} cb         function to be called when the auth has been\n     *                               found or an error has occurred \n     * @api private\n     */\n    _attachAuthToUser: function(auth, cb){\n      var self = this;\n\n      // create the user\n      if(!auth.user){\n        waterlock.User.create({auth:auth.id}).exec(function(err, user){\n          if(err){\n            waterlock.logger.debug(err);\n            return cb(err);\n          }\n\n          // update the auth object\n          waterlock.Auth.update(auth.id, {user:user.id}).exec(function(err, auth){\n            if(err){\n              waterlock.logger.debug(err);\n              return cb(err);\n            }\n\n            user.auth = auth.shift();\n            cb(err, user);  \n          });\n        });\n      }else{\n        // just fire off update to user object so we can get the \n        // backwards association going.\n        if(!auth.user.auth){\n          waterlock.User.update(auth.user.id, {auth:auth.id}).exec(function(){});\n        }\n        \n        cb(null, self._invertAuth(auth));\n      }\n    },\n\n    /**\n     * Find or create the auth then pass the results to _attachAuthToUser \n     * \n     * @param  {Object}   criteria   should be id to find the auth by\n     * @param  {Object}   attributes auth attributes\n     * @param  {Function} cb         function to be called when the auth has been\n     *                               found or an error has occurred \n     *\n     * @api public\n     */\n    findOrCreateAuth: function(criteria, attributes, cb){\n      var self = this;\n      waterlock.Auth.findOrCreate(criteria, attributes)\n      .exec(function(err, newAuth){\n        if(err){\n          waterlock.logger.debug(err);\n          return cb(err);\n        }\n\n        waterlock.Auth.findOne(newAuth.id).populate('user')\n        .exec(function(err, auth){\n          if(err){\n            waterlock.logger.debug(err);\n            return cb(err);\n          }\n\n          self._attachAuthToUser(auth, cb);\n        });\n      });\n    },\n\n    /**\n     * Attach given auth attributes to user \n     * \n     * @param  {Object}   attributes auth attributes\n     * @param  {Object}   user       user instance\n     * @param  {Function} cb         function to be called when the auth has been\n     *                               attached or an error has occurred \n     * @api public\n     */\n    attachAuthToUser: function(attributes, user, cb){\n      var self = this;\n      attributes.user = user.id;\n\n      waterlock.User.findOne(user.id).exec(function(err, user){\n        if(err){\n          waterlock.logger.debug(err);\n          return cb(err);\n        }\n  \n        if(user.auth){\n          delete(attributes.auth); \n          //update existing auth\n          waterlock.Auth.findOne(user.auth).exec(function(err, auth){\n            if(err){\n              waterlock.logger.debug(err); \n              return cb(err); \n            }\n\n            // Check if any attribtues have changed if so update them\n            if(self._updateAuth(auth, attributes)){\n               auth.save(function(err){\n                if(err){\n                  waterlock.logger.debug(err); \n                  return cb(err); \n                }\n                user.auth = auth; \n                cb(err, user); \n              });           \n            }else{\n              user.auth = auth; \n              cb(err, user); \n            }\n\n          });\n        }else{\n          // force create by pass of user id\n          self.findOrCreateAuth(user.id, attributes, cb);\n        }\n      });\n    },\n\n    /**\n     * Inverts the auth object so we don't need to run another query\n     * \n     * @param  {Object} auth Auth object\n     * @return {Object}      User object\n     * @api private\n     */\n    _invertAuth: function(auth){\n      // nothing to invert\n      if(!auth || !auth.user){\n        return auth; \n      }\n\n      var u = auth.user;\n      delete(auth.user);\n      u.auth = auth;\n      return u;\n    },\n\n    /**\n     * Decorates the auth object with values of the attributes object\n     * where the attributes differ from the auth\n     * \n     * @param  {Object} auth       waterline Auth instance\n     * @param  {Object} attributes used to update auth with\n     * @return {Boolean}           true if any values were updated\n     */\n    _updateAuth: function(auth, attributes){\n      var changed = false; \n      for(var key in attributes){\n        if(attributes.hasOwnProperty(key)){\n          if(auth[key] !== attributes[key]){\n            auth[key] = attributes[key]; \n            changed = true; \n          }\n        }\n      }\n      return changed;\n    }\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/config.js":"'use strict';\n\nvar path = require('path');\n\n/**\n * Tries to require the waterlock config\n * \n * @return {object} waterlock config file\n */\nmodule.exports = function(){\n  var config;\n  try{\n    var configPath = path.normalize(__dirname+'/../../../config/waterlock.js');\n    config = require(configPath).waterlock;\n  }catch(e){\n    var error = new Error('No config file defined, try running [waterlock generate config]\\n\\n'+e);\n    throw error;\n  }\n\n  return config;\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/methods.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Gets the current auth methods deinfed in the waterlock config file\n * then tries to require them one by one.\n * \n * @return {Object} all chosen auth methods\n */\nmodule.exports = function(){\n  var waterlock = this;\n\n  return {\n\n    /**\n     * try to require the authentcation method defined in user config\n     *\n     * @return {Object} containing all required auth methods\n     * @api private\n     */\n    collect: function(){\n      var func;\n\n      if(typeof waterlock.config.authMethod[0] === 'object'){\n        func = this._handleObjects;\n      }else if(typeof waterlock.config.authMethod === 'object'){\n        func = this._handleObject;\n      }else{\n        func = this._handleName;\n      }\n      \n      return func.apply(this, [waterlock.config.authMethod]);\n    },\n\n    /**\n     * requires an array of auth method objects \n     * \n     * @param  {Array} authMethods object array of auth methods\n     * @return {Object}            containing all required auth methods\n     * @api private\n     */\n    _handleObjects: function(authMethods){\n      var method = {};\n      var _methodName;\n\n      try{\n        for(var i = 0; i < authMethods.length; i++){\n          _methodName = authMethods[i].name;\n          var _method = _.merge(require('../../'+_methodName), authMethods[i]);\n          method[_method.authType] = _method;\n        }\n      }catch(e){\n        this._errorHandler(_methodName);\n      }\n\n      return method;\n    },\n\n    /**\n     * requires a single auth method by object\n     * \n     * @param  {Object} authMethod the auth method\n     * @return {Object}            containing all required auth methods\n     * @api private\n     */\n    _handleObject: function(authMethod){\n      var method = {};\n      var _methodName = authMethod.name;\n      \n      try{\n        var _method = _.merge(require('../../'+_methodName), authMethod);\n        method[_method.authType] = _method;\n      }catch(e){\n        this._errorHandler(_methodName);\n      }\n\n      return method;\n    },\n\n    /**\n     * requires a single auth method by name\n     * \n     * @param  {String} authMethod the auth method name\n     * @return {Object}            containing all required auth methods\n     * @api private\n     */\n    _handleName: function(authMethod){\n      var method = {};\n      var _methodName = authMethod;\n\n      try{\n        var _method = _.merge(require('../../'+_methodName), authMethod);\n        method[_method.authType] = _method;\n      }catch(e){\n        this._errorHandler(_methodName);\n      }\n\n      return method;\n    },\n\n    /**\n     * throws errors\n     * \n     * @param  {String} method the method that failed to be required\n     * @api private\n     */\n    _errorHandler: function(method){\n      var error = new Error('Authentication method '+method+' could not be found. \\n'+\n      'Try running npm install '+method+'\\n\\n');\n      \n      throw error;\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/index.js":"'use strict';\n\n/**\n * Models\n * \n * @return {object} all models\n */\nmodule.exports = function(){\n  \n  var _  = require('lodash');\n\n  var template = {\n    /**\n     * user model\n     */\n    user: require('./user'),\n\n    /**\n     * json web token model\n     */\n    jwt: require('./jwt'),\n\n    /**\n     * use model\n     */\n    use: require('./use'),\n\n    /**\n     * attempt model\n     */\n    attempt: require('./attempt'),\n    \n    /**\n     * auth model\n     */\n    auth: require('./auth')\n  };\n\n  /**\n   * loop through methods object and bind any extra models\n   * they may have defined\n   */\n  for(var key in this.methods){\n    if(this.methods.hasOwnProperty(key)){\n      var extras = this.methods[key].model.extras;\n      if(extras){\n        _.merge(template, extras);\n      }\n    }\n  }\n  \n  return template;\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/controllers/index.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = function(){\n  var waterlock = this;\n\n  return {\n    /**\n     * waterlocked is an alias to the auth controller, waterlocked just\n     * sounds cooler. Bootstraps all extra actions from selected authentication\n     * methods.\n     *\n     * @param  {object} actions user defiend actions\n     * @return {object} user actions merged with template\n     */\n    waterlocked: function(actions){\n      var methods = waterlock.methods;\n\n      var actionTemplate = {};\n      for(var key in methods){\n        var action = methods[key].actions;\n        if(action.hasOwnProperty('extras')){\n          waterlock.logger.verbose('bootstraping auth actions from '+key);\n          _.merge(actionTemplate, action.extras);\n        }\n      }\n\n      var template = {\n        login: require('./actions/login'),\n        register: require('./actions/register'),\n        logout:require('./actions/logout')\n      };\n\n      _.merge(actionTemplate, template);\n\n      return _.merge(actionTemplate, actions);\n    },\n\n    /**\n     * bootstraps user defined overrides with template actions\n     *\n     * @param  {object} actions user defiend actions\n     * @return {object} user actions merged with template\n     */\n    user: function(actions){\n      waterlock.logger.verbose('bootstraping user actions');\n\n      var template = {\n        jwt: require('./actions/jwt')\n      };\n     return _.merge(template, actions);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/utils.js":"'use strict';\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar uuid = require('node-uuid');\nvar jwt = require('jwt-simple');\n\n/**\n * various utility methods\n * \n * @type {Object}\n */\nmodule.exports = {\n  /**\n   * gathers all params for this request\n   * \n   * @param  {Object} req the express request object\n   * @return {Object}     all params\n   * @api public\n   */\n  allParams: function(req){\n    var params = req.params.all();\n    _.merge(params, req.headers);\n    return _.merge(params, req.query);\n  },\n\n  /**\n   * Counts only the top level of a object\n   * \n   * @param  {Object} obj plain object to count\n   * @return {Integer}     the number of top level elements\n   * @api public\n   */\n  countTopLevel: function(obj){\n    if(typeof obj !== 'object'){\n      return -1;\n    }\n\n    var count = 0;\n    for(var key in obj){\n      if(obj.hasOwnProperty(key)){\n        count++;\n      }\n    }\n    return count;\n  },\n\n  /**\n   * allows us to access an object like an array [0] == {first object}\n   * \n   * @param  {Integer} index the position in the object to look\n   * @param  {Object} obj   the object to access\n   * @return {Object}       the value at given position\n   * @api public\n   */\n  accessObjectLikeArray: function(index, obj){\n    // if obj is not an object just return it nothing to do\n    if(typeof obj !== 'object'){\n      return obj;\n    }\n\n    // if object already is an array return the value at given index\n    if(typeof obj[index] !== 'undefined'){\n      return obj[index];\n    }\n\n    var count = 0;\n    for(var key in obj){\n      if(count === index){\n        return obj[key];\n      }\n      count++;\n    }\n  },\n\n  /**\n   * Creates a new JWT token\n   * \n   * @param  {Integer} req\n   * @param  {Object} res\n   * @param  {Object} user   the user model\n   * @return {Object}       the created jwt token.\n   * @api public\n   */\n  createJwt: function(req, res, user) {\n    var jsonWebTokens = waterlock.config.jsonWebTokens || {};\n    var expiryUnit = (jsonWebTokens.expiry && jsonWebTokens.expiry.unit) || 'days';\n    var expiryLength = (jsonWebTokens.expiry && jsonWebTokens.expiry.length) || 7;\n    var expires = moment().add(expiryLength, expiryUnit).valueOf();\n    var issued = Date.now();\n    user = user || req.session.user;\n\n    var token = jwt.encode({\n      iss: user.id + '|' + req.remoteAddress,\n      sub: jsonWebTokens.subject,\n      aud: jsonWebTokens.audience,\n      exp: expires,\n      nbf: issued,\n      iat: issued,\n      jti: uuid.v1()\n    }, jsonWebTokens.secret);\n\n    return {\n      token: token,\n      expires: expires\n    };\n  }\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/logger.js":"'use strict';\n\nvar winston = require('winston');\nvar path = require('path');\nvar logPath = path.normalize('../../../config/log');\n\n// grabs the curent log level from the sails config/log file\nvar logLevel = require(logPath).log;\n\nvar logger = new (winston.Logger)({\n  levels:{\n    error: 4,\n    warn: 3,\n    debug: 2,\n    info: 1,\n    verbose: 0\n  },\n  colors:{\n    debug: 'blue',\n    info: 'green',\n    warn: 'yellow',\n    error: 'red',\n    verbose: 'cyan'\n  },\n  transports: [\n    new (winston.transports.Console)({\n      levels: logLevel,\n      colorize: true\n    }),\n  ]\n});\n\nmodule.exports = logger;","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/bin/waterlock.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar pkg = require('../package.json');\nvar program = require('commander');\n\nprogram.version(pkg.version, '-v, --version');\n\nprogram.usage('[command]');\n\nvar cmd;\ncmd = program.command('generate');\ncmd.option('-r, --raw', 'generates the raw templates');\ncmd.description('generate various components');\ncmd.action(require('./waterlock-generate'));\n\nprogram.parse(process.argv);\n\nif(!program.args.length){\n  program.help();\n}","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/bin/waterlock-generate.js":"#!/usr/bin/env node\n\n'use strict';\n\nmodule.exports = function(){\n  var args = Array.prototype.slice.call(arguments);\n  var meta = args.pop();\n  var task = args.shift();\n\n  var raw = false;\n  if(typeof meta.raw !== 'undefined' && meta.raw){\n    raw = meta.raw;\n  }\n  var auth = require('./waterlock-auth-methods')();\n  auth.install(task);  \n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/bin/waterlock-auth-methods.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar path = require('path'); \nvar fs = require('fs'); \nvar readline = require('readline'); \nvar rl = readline.createInterface({\n  input: process.stdin, \n  output: process.stdout\n}); \n\nmodule.exports = function(){\n  var self = this || {};\n  self.waterlockPlugins = [];\n\n  self.logger = require('../lib/logger');\n  // waterlock itself\n  self.waterlockPlugins.push(path.resolve(__dirname+'/../lib/templates'));\n  \n  // grab all node_modules\n  var node_modules = path.resolve(__dirname+'/../..'); \n  var _node_modules = fs.readdirSync(node_modules);\n  \n  // sort through them and only add any waterlock-* \n  for(var i = 0; i < _node_modules.length; i++){\n    if(_node_modules[i].indexOf('waterlock-') > -1){\n      self.waterlockPlugins.push(node_modules + '/' + _node_modules[i] + '/lib/templates');\n    }\n  }\n\n  return {\n    /**\n     * List of full path targets to install\n     * \n     * @type {Array}\n     */\n    installArray: [],\n    \n    /**\n     * base path for the installed sails app\n     * \n     * @type {String}\n     */\n    basePath: path.resolve(__dirname+'/../../..'),\n\n    /**\n     * installs selected task\n     * \n     * @param  {String} task the resource to install\n     */\n    install: function(task){\n      switch(task){\n        case 'all':\n          this.collectAll();\n          break; \n        case 'models':\n        case 'controllers':\n        case 'configs':\n        case 'views':\n        case 'policies':\n          this.collect(task);\n          break;\n        default:\n          this.usageExit(); \n          break; \n      }\n\n      // start the chain\n      this.triggerNext();\n    },\n\n    /**\n     * collects all targets to install from all waterlock modules\n     * \n     * @param  {String} target the resource to collect from waterlock module\n     */\n    collect: function(target){\n      for(var i = 0;  i < self.waterlockPlugins.length; i++){\n        var arr = this.readdirSyncComplete(self.waterlockPlugins[i] + '/' + target);\n        this.installArray = this.installArray.concat(arr);\n      }\n    },\n\n    /**\n     * wrapper for collect on every target\n     */\n    collectAll: function(){\n      this.collect('models');\n      this.collect('controllers');\n      this.collect('configs');\n      this.collect('policies');\n      this.collect('views');\n    },\n\n    /**\n     * reads contents of directory and returns an Array \n     * of full path strings to the files\n     * \n     * @param  {String} path the directory path to search\n     * @return {Array}      array of fullpath strings of every file in directory\n     */\n    readdirSyncComplete: function(path){\n      var fullPath = []; \n      try{\n        var files = fs.readdirSync(path); \n        for(var i = 0; i < files.length; i++){\n          fullPath.push(path + '/' + files[i]); \n        }\n        return fullPath; \n      }catch(e){\n        return [];\n      }\n    },\n\n    /**\n     * Shows the script usage and exits the program\n     */\n    usageExit: function(){\n      this.usage();\n      process.exit(1);\n    },\n\n    /**\n     * Shows the script usage\n     */\n    usage: function(){\n      console.log('');\n      this.log('Usage: generate [resource]');\n      this.log('Resources:');\n      this.log('  all                    generates all components', false);\n      this.log('  models                 generates all models', false);\n      this.log('  controllers            generates all controllers', false);\n      this.log('  configs                generates default configs', false);\n      this.log('  views                  generates default view templates', false);\n      this.log('  policies               generates all policies');\n    },\n\n    /**\n     * Logs messages with optional line break\n     * \n     * @param  {String} msg message to log\n     * @param  {Boolean} br  if true or undefined preforms line break after mmsg\n     */\n    log: function(msg, br){\n      console.log('  '+msg);\n\n      if(typeof br === 'undefined' || br){\n        console.log(' '); \n      }\n    },\n\n    /**\n     * Attempts to install the next file in the installArray\n     * if no files are left in the array closes the readline\n     */\n    triggerNext: function(){\n      var src = this.installArray.shift(); \n\n      if(typeof src !== 'undefined'){\n        var parts = src.split('/'); \n        var resourcePath = this.getResourcePath(parts[parts.length-2]); \n        var dest = this.basePath + resourcePath + '/' + parts[parts.length-1]; \n        \n        if(typeof resourcePath !== 'undefined'){\n          this._install(src, dest); \n        }else{\n          this.triggerNext(); \n        }\n         \n      }else{\n        this.log('all done, get ready to rock!  (╯°□°）╯︵ ┻━┻');\n        rl.close(); \n      }\n    },\n\n    /**\n     * gets the directory path in the sails app of various resources\n     * \n     * @param  {String} resource the resource to translate to a path\n     * @return {String}          resource path\n     */\n    getResourcePath: function(resource){\n      switch(resource){\n        case 'models':\n          return '/api/models'; \n        case 'controllers':\n          return '/api/controllers'; \n        case 'configs':\n          return '/config'; \n        case 'policies':\n          return '/api/policies'; \n        case 'views':\n          return '/views'; \n        default:\n          return null; \n        }\n    },\n\n    /**\n     * tries to install the source file to the destination path, if it exsits\n     * in the destination will trigger a prompt.\n     * \n     * @param  {String} src  fullpath of source file to install\n     * @param  {String} dest fullpath of destination file to install\n     */\n    _install: function(src, dest){\n      if(fs.existsSync(dest)){\n        this.waitForResponse(src, dest); \n      }else{\n        this.copy(src, dest); \n        this.triggerNext(); \n      }\n    },\n\n    /**\n     * copies the source to the destination\n     * \n     * @param  {String} src  the source file\n     * @param  {String} dest the destination file\n     */\n    copy: function(src, dest){\n      self.logger.info('generating '+dest); \n      fs.createReadStream(src).pipe(fs.createWriteStream(dest)); \n    },\n\n    /**\n     * prompts the user if we can overwrite the destination file\n     * \n     * @param  {String} src  the source file\n     * @param  {String} dest the destination file\n     */\n    waitForResponse: function(src, dest){\n      self.logger.warn('File at '+dest+' exists, overwrite?');\n      \n      rl.question('(yN) ', function(answer){\n        switch(answer.toLowerCase()){\n          case 'y':\n            this.copy(src, dest); \n            this.triggerNext(); \n            break; \n          case 'n':\n            this.triggerNext(); \n            break; \n          default:\n            this.waitForResponse(src, dest); \n            break; \n        }\n      }.bind(this)); \n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/cycle.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Cycle\n *\n * @return {Object} various cycle functions\n */\nmodule.exports = function() {\n  var waterlock = this;\n\n  return {\n\n    /**\n     * handles successful logins\n     *\n     * @param  {Object} req  express request object\n     * @param  {Object} res  expresss response object\n     * @param  {Object} user the user instance\n     * @api public\n     */\n    registerSuccess: function(req, res, user) {\n      waterlock.logger.debug('user registration success');\n      if (!user) {\n        waterlock.logger.debug('registerSuccess requires a valid user object');\n        return res.serverError();\n      }\n\n      var address = this._addressFromRequest(req);\n\n      var attempt = {\n        user: user.id,\n        successful: true\n      };\n\n      _.merge(attempt, address);\n\n      waterlock.Attempt.create(attempt).exec(function(err) {\n        if (err) {\n          waterlock.logger.debug(err);\n        }\n      });\n\n      // store user in && authenticate the session\n      req.session.user = user;\n      req.session.authenticated = true;\n\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.register.success, user);\n\n      if (postResponse === 'jwt') {\n        //Returns the token immediately\n        var jwtData = waterlock._utils.createJwt(req, res, user);\n\n        Jwt.create({token: jwtData.token, uses: 0, owner: user.id}).exec(function(err){\n          if(err){\n            return res.serverError('JSON web token could not be created');\n          }\n\n          var result = {};\n\n          result[waterlock.config.jsonWebTokens.tokenProperty] = jwtData.token;\n          result[waterlock.config.jsonWebTokens.expiresProperty] = jwtData.expires;\n\n          if (waterlock.config.jsonWebTokens.includeUserInJwtResponse) {\n            result['user'] = user;\n          }\n\n          res.json(result);\n        });\n      }else if (typeof postResponse === 'string' && this._isURI(postResponse)) {\n        res.redirect(postResponse);\n      } else {\n        res.ok(postResponse);\n      }\n    },\n\n    /**\n     * handles registration failures\n     *\n     * @param  {Object} req  express request object\n     * @param  {Object} res  expresss response object\n     * @param  {Object} user the user instance\n     * @param  {Object|String} error the error that caused the failure\n     * @api public\n     */\n    registerFailure: function(req, res, user, error) {\n      waterlock.logger.debug('user register failure');\n\n      if (user) {\n        var address = this._addressFromRequest(req);\n\n        var attempt = {\n          user: user.id,\n          successful: false\n        };\n\n        _.merge(attempt, address);\n\n        waterlock.Attempt.create(attempt).exec(function(err) {\n          if (err) {\n            waterlock.logger.debug(err);\n          }\n        });\n      }\n\n      if (req.session.authenticated) {\n        req.session.authenticated = false;\n      }\n\n      delete(req.session.user);\n\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.register.failure,\n        error);\n\n      if (typeof postResponse === 'string' && this._isURI(postResponse)) {\n        res.redirect(postResponse);\n      } else {\n        res.forbidden(postResponse);\n      }\n    },\n\n\n    /**\n     * handles successful logins\n     *\n     * @param  {Object} req  express request object\n     * @param  {Object} res  expresss response object\n     * @param  {Object} user the user instance\n     * @api public\n     */\n    loginSuccess: function(req, res, user) {\n      waterlock.logger.debug('user login success');\n      if (!user) {\n        waterlock.logger.debug('loginSuccess requires a valid user object');\n        return res.serverError();\n      }\n\n      var address = this._addressFromRequest(req);\n\n      var attempt = {\n        user: user.id,\n        successful: true\n      };\n\n      _.merge(attempt, address);\n\n      waterlock.Attempt.create(attempt).exec(function(err) {\n        if (err) {\n          waterlock.logger.debug(err);\n        }\n      });\n\n      // store user in && authenticate the session\n      req.session.user = user;\n      req.session.authenticated = true;\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.login.success,\n        user);\n      if (postResponse === 'jwt') {\n        //Returns the token immediately\n        var jwtData = waterlock._utils.createJwt(req, res, user);\n\n        Jwt.create({token: jwtData.token, uses: 0, owner: user.id}).exec(function(err){\n          if(err){\n            return res.serverError('JSON web token could not be created');\n          }\n\n          var result = {};\n\n          result[waterlock.config.jsonWebTokens.tokenProperty] = jwtData.token || 'token';\n          result[waterlock.config.jsonWebTokens.expiresProperty] = jwtData.expires || 'expires';\n\n          if (waterlock.config.jsonWebTokens.includeUserInJwtResponse) {\n            result['user'] = user;\n          }\n\n          res.json(result);\n        });\n      } else if(typeof postResponse === 'string' && this._isURI(postResponse)){\n        res.redirect(postResponse);\n      } else {\n        res.ok(postResponse);\n      }\n    },\n\n    /**\n     * handles login failures\n     *\n     * @param  {Object} req  express request object\n     * @param  {Object} res  expresss response object\n     * @param  {Object} user the user instance\n     * @param  {Object|String} error the error that caused the failure\n     * @api public\n     */\n    loginFailure: function(req, res, user, error) {\n      waterlock.logger.debug('user login failure');\n\n      if (user) {\n        var address = this._addressFromRequest(req);\n\n        var attempt = {\n          user: user.id,\n          successful: false\n        };\n\n        _.merge(attempt, address);\n\n        waterlock.Attempt.create(attempt).exec(function(err) {\n          if (err) {\n            waterlock.logger.debug(err);\n          }\n        });\n      }\n\n      if (req.session.authenticated) {\n        req.session.authenticated = false;\n      }\n\n      delete(req.session.user);\n\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.login.failure,\n        error);\n\n      if (typeof postResponse === 'string' && this._isURI(postResponse)) {\n        res.redirect(postResponse);\n      } else {\n        res.forbidden(postResponse);\n      }\n    },\n\n    /**\n     * handles logout events\n     *\n     * @param  {Object} req  express request object\n     * @param  {Object} res  expresss response object\n     * @api public\n     */\n    logout: function(req, res) {\n      waterlock.logger.debug('user logout');\n      delete(req.session.user);\n\n      if (req.session.authenticated) {\n        this.logoutSuccess(req, res);\n      } else {\n        this.logoutFailure(req, res);\n      }\n    },\n\n    /**\n     * the logout 'success' event\n     *\n     * @param  {Object} req express request object\n     * @param  {Object} res express response object\n     * @api public\n     */\n    logoutSuccess: function(req, res) {\n\n      req.session.authenticated = false;\n\n      var defaultString = 'You have successfully logged out.';\n\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.logout.success,\n        defaultString);\n\n      if (typeof postResponse === 'string' && this._isURI(postResponse)) {\n        res.redirect(postResponse);\n      } else {\n        res.ok(postResponse);\n      }\n    },\n\n    /**\n     * the logout 'failure' event\n     *\n     * @param  {Object} req express request object\n     * @param  {Object} res express response object\n     * @api public\n     */\n    logoutFailure: function(req, res) {\n      var defaultString = 'You have successfully logged out.';\n\n      // now respond or redirect\n      var postResponse = this._resolvePostAction(waterlock.config.postActions.logout.failure,\n        defaultString);\n\n      if (typeof postResponse === 'string' && this._isURI(postResponse)) {\n        res.redirect(postResponse);\n      } else {\n        res.ok(postResponse);\n      }\n    },\n\n    /**\n     * Tries to check if the given string is a URI\n     *\n     * @param  {String}  str the string to check\n     * @return {Boolean}     true if string is a URI\n     * @api private\n     */\n    _isURI: function(str) {\n      if (str.indexOf('/') === 0) { /* assume relative path */\n        return true;\n      } else if (str.indexOf('http') >= 0) { /* assume url */\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * returns an ip address and port from the express request object, or the\n     * sails.io socket which is attached to the req object.\n     *\n     * @param  {Object} req express request\n     * @return {Object}     the transport address object\n     * @api private\n     */\n    _addressFromRequest: function(req) {\n      if (req.connection && req.connection.remoteAddress) {\n        return {\n          ip: req.connection.remoteAddress,\n          port: req.connection.remotePort\n        };\n      }\n\n      if (req.socket && req.socket.remoteAddress) {\n        return {\n          ip: req.socket.remoteAddress,\n          port: req.socket.remotePort\n        };\n      }\n\n      return {\n        ip: '0.0.0.0',\n        port: 'n/a'\n      };\n    },\n\n    /**\n     * translates the mix postAction to a string\n     *\n     * @param  {String|Object} mix the postAction object|string\n     * @param  {String|Object} def the default value to use if mix cannot be\n     *                         translated or is 'default'\n     * @return {String|Object} the translated postAction or default value\n     * @api private\n     */\n    _resolvePostAction: function(mix, def){\n      //If postAction is not defined fall back to default\n      if(mix === 'default' || typeof mix === 'undefined') {\n        return def;\n      }\n\n      if (typeof mix === 'object') {\n        return this._relativePathFromObj(mix);\n      }\n\n      return mix;\n    },\n\n    /**\n     * returns the relative path from an object, the object is\n     * expected to look like the following\n     *\n     * example:\n     * {\n     *   controller: 'foo',\n     *   action: 'bar'\n     * }\n     *\n     * @param  {Object} obj the redirect object\n     * @return {String}     the relative path\n     * @api private\n     */\n    _relativePathFromObj: function(obj) {\n      if (typeof obj.controller === 'undefined' || typeof obj.action === 'undefined') {\n        var error = new Error('You must define a controller and action to redirect to.').stack;\n        throw error;\n      }\n\n      return '/' + obj.controller + '/' + obj.action;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/validator.js":"'use strict';\n\n/**\n * This validator is responsible for \n * validating and tacking JWT usage\n * \n * @return {Object} validator functions\n */\nmodule.exports = function(){\n  var waterlock = this;\n\n  return {\n\n    /**\n     * Validates a token\n     * \n     * @param  {String}   token the token to be validated\n     * @param  {Function} cb    called when error has occured or token is validated\n     */\n    validateToken: function(token, cb){\n      try{\n        // decode the token\n        var _token = waterlock.jwt.decode(token, waterlock.config.jsonWebTokens.secret);\n \n        // set the time of the request\n        var _reqTime = Date.now();\n\n        // If token is expired\n        if(_token.exp <= _reqTime){\n          waterlock.logger.debug('access token rejected, reason: EXPIRED');\n          return cb('Your token is expired.');        \n        }\n\n        // If token is early\n        if(_reqTime <= _token.nbf){\n          waterlock.logger.debug('access token rejected, reason: TOKEN EARLY');\n          return cb('This token is early.');\n        }\n\n        // If audience doesn't match\n        if(waterlock.config.jsonWebTokens.audience !== _token.aud){\n          waterlock.logger.debug('access token rejected, reason: AUDIENCE');\n          return cb('This token cannot be accepted for this domain.');\n        }\n\n        this.findUserFromToken(_token, cb);\n\n      } catch(err){\n        cb(err);\n      }\n    },\n\n    /**\n     * Find the user the give token is issued to\n     * \n     * @param  {Object}   token The parsed token\n     * @param  {Function} cb    Callback to be called when a user is \n     *                          found or an error has occured\n     */\n    findUserFromToken: function(token, cb){\n      // deserialize the token iss\n      var _iss = token.iss.split('|');\n\n      waterlock.User.findOne(_iss[0]).exec(function(err, user){\n        if(err){\n          waterlock.logger.debug(err);\n        }\n\n        cb(err, user);\n      });\n    },\n\n    /**\n     * Validates a token from an Express request object\n     * \n     * @param  {Express request}   req the Express request object\n     * @param  {Function} cb  Callback when to be called when token \n     *                        has been validated or an error has occured\n     */\n    validateTokenRequest: function(req, cb){\n      var self = this;\n      var token = waterlock._utils.allParams(req).access_token;\n\n      if(token){\n\n        // validate the token\n        this.validateToken(token, function(err, user){\n          if(err){\n            waterlock.logger.debug(err);\n            return cb(err);\n          }\n          \n          // check if we're running in stateless\n          if(!waterlock.config.jsonWebTokens.stateless){\n            self.bindToSession(req, user);\n          }\n\n          // check if we're tracking usage\n          if(waterlock.config.jsonWebTokens.trackUsage){\n            var address = waterlock.cycle._addressFromRequest(req);\n            return self.trackTokenUsage(address, token, user, cb);\n          }\n\n          waterlock.logger.debug('access token accepted');\n          cb(null, user);\n        });\n      }else{\n        waterlock.logger.debug('no access token present');\n        cb('Access token not present.');\n      }\n    },\n\n    /**\n     * Attaches a user object to the Express req session\n     * \n     * @param  {Express request} req  the Express request object\n     * @param  {Waterline DAO} user the waterline user object\n     */\n    bindToSession: function(req, user){\n      req.session.authenticated = true;\n      req.session.user = user;\n    },\n\n    /**\n     * Finds the DAO instance of the give token and tracks the usage \n     * \n     * @param  {String}   token   the raw token\n     * @param  {Object}   address the transport address\n     * @param  {Function} cb      Callback to be invoked when an error has \n     *                            occured or the token was tracked successfully\n     */\n    findAndTrackJWT: function(token, address, cb){\n      waterlock.Jwt.findOne({token: token}, function(err, j){\n        if(err){\n          return cb(err);\n        }\n        \n        if(!j){\n          waterlock.logger.debug('access token not found');\n          return cb('Token not found');\n        }\n\n        if(j.revoked){\n          waterlock.logger.debug('access token rejected, reason: REVOKED');\n          return cb('This token has been revoked');\n        }\n\n        var use = {jsonWebToken: j.id, remoteAddress: address.ip};\n        waterlock.Use.create(use).exec(function(){});\n\n        cb(null);\n      });\n    },\n\n    /**\n     * Tracks the tokens usage and invokes the user defined callback\n     * \n     * @param  {Object}   address the transport address\n     * @param  {String}   token   the raw token\n     * @param  {Waterline DAO}   user    the waterline user object\n     * @param  {Function} cb      Callback to be invoked when an error has occured\n     *                            or the token has been tracked successfully\n     */\n    trackTokenUsage: function(address, token, user, cb){\n      this.findAndTrackJWT(token, address, function(err){\n        if(err){\n          waterlock.logger.debug(err);\n          return cb(err);\n        }\n        cb(null, user);\n      });\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/attempt.js":"'use strict';\n\n/**\n * Attempts describes an user's login, if it was successful, what ip it came from etc.\n * @param  {object} attributes any attributes to append to the attempt model\n * @return {object} the template merged with the user defined attributes\n */\nexports.attributes = function(attributes){\n  var _ = require('lodash');\n  \n  var template = {\n    user:{\n      model: 'user'\n    },\n    successful:{\n      type: 'boolean',\n      defaultsTo: false\n    },\n    ip:{\n      type: 'string'\n    },\n    port:{\n      type: 'string'\n    }\n  };\n\n  return _.merge(template, attributes);\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/auth.js":"'use strict';\n\n/**\n * Attempts describes an user's login, if it was successful, what ip it came from etc.\n * @param  {object} attributes any attributes to append to the attempt model\n * @return {object} the template merged with the user defined attributes\n */\nexports.attributes = function(attributes){\n  var _ = require('lodash');\n  var methods = waterlock.methods;\n\n  for(var key in methods){\n    var method = methods[key];\n    if(method.hasOwnProperty('model')){\n      // call the decorator of each auth method\n      method.model.auth.attributes(attributes);\n    }\n  }\n  \n  var template = {\n    user:{\n      model: 'user'\n    }\n  };\n\n  return _.merge(template, attributes);\n};\n\n/**\n * used to hash the password\n * @param  {object}   values \n * @param  {Function} cb     \n */\nexports.beforeCreate = function(values, cb){\n  var methods = waterlock.methods;\n  for(var key in methods){\n    var model = methods[key].model.auth;\n    if(model.hasOwnProperty('beforeCreate')){\n      model.beforeCreate(values);\n    }\n  }\n\n  cb();\n};\n\n/**\n * used to update the password hash if user is trying to update password\n * @param  {object}   values \n * @param  {Function} cb     \n */\nexports.beforeUpdate = function(values, cb){\n  var methods = waterlock.methods;\n  for(var key in methods){\n    var model = methods[key].model.auth;\n    if(model.hasOwnProperty('beforeUpdate')){\n      model.beforeUpdate(values);\n    }\n  }\n\n  cb();\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/jwt.js":"'use strict';\n\n/**\n * Returns an object attributes for the ApiKey model\n * @param  {Object} attributes user defined attributes for the ApiKey model\n * @return {Object} the user defined attributes combined with the template\n */\nexports.attributes = function(attributes){\n  var _ = require('lodash');\n\n  var template = {\n    token: {\n      type: 'text',\n      maxLength: 512\n    },\n    uses: {\n      collection: 'use',\n      via: 'jsonWebToken'\n    },\n    owner: {\n      model: 'user'\n    },\n    revoked: {\n      type: 'boolean',\n      defaultsTo: false\n    }\n  };\n\n  return _.merge(template, attributes);\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/use.js":"'use strict';\n\n/**\n * Returns an object attributes for the KeyStat model\n * @param  {Object} attributes user defined attributes for the ApiKey model\n * @return {Object} the user defined attributes combined with the template\n */\nexports.attributes = function(attributes){\n  var _ = require('lodash');\n\n  var template = {\n    remoteAddress: {\n      type: 'string'\n    },\n    jsonWebToken: {\n      model: 'jwt'\n    },\n  };\n\n  return _.merge(template, attributes);\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/models/user.js":"'use strict';\n\n/**\n * user model attributes\n * @param  {obejct} attributes user defined attributes\n * @return {object} attributes merged with template and method model object\n */\nexports.attributes = function(attributes){\n  var _ = require('lodash');\n\n  \n  var template = {\n    attempts: {\n      collection: 'attempt',\n      via: 'user'\n    },\n    jsonWebTokens: {\n      collection: 'jwt',\n      via: 'owner'\n    },\n    auth:{\n      model: 'auth'\n    }\n  };\n\n  return _.merge(template, attributes);\n};\n\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/controllers/actions/login.js":"'use strict';\n\n/**\n * login action\n *\n * tries to find if we have an auth method to handle this type of login\n * request.\n * \n * GET /auth/login\n */\nmodule.exports = function(req, res){\n  var params = waterlock._utils.allParams(req);\n\n  // If there is only 1 chosen auth method just assume it\n  if(waterlock._utils.countTopLevel(waterlock.methods) === 1){\n    params.type = waterlock._utils.accessObjectLikeArray(0, waterlock.methods).authType;\n  }\n\n  if(typeof params.type === 'undefined'){\n    return res.badRequest('You must specify a type parameter.');\n  }\n\n  if(waterlock.methods.hasOwnProperty(params.type)){\n    // call the login function of the correct auth type\n    waterlock.methods[params.type].actions.login(req, res);\n  }else{\n    return res.badRequest('unknown/invalid authentication type');\n  }\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/controllers/actions/logout.js":"'use strict';\n\n/**\n * logout action\n * \n * creates a new token \n * \n * GET /user/jwt\n */\nmodule.exports = function(req, res){\n  var params = waterlock._utils.allParams(req);\n\n  if(typeof params.type === 'undefined' || \n    !waterlock.methods.hasOwnProperty(params.type)){\n    waterlock.cycle.logout(req, res);\n  }else{\n    waterlock.methods[params.type].actions.logout(req, res);\n  }\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/controllers/actions/register.js":"'use strict';\n\n/**\n * login action\n *\n * tries to find if we have an auth method to handle this type of login\n * request.\n *\n * GET /auth/login\n */\nmodule.exports = function(req, res){\n  var params = waterlock._utils.allParams(req);\n\n  // If there is only 1 chosen auth method just assume it\n  if(waterlock._utils.countTopLevel(waterlock.methods) === 1){\n    params.type = waterlock._utils.accessObjectLikeArray(0, waterlock.methods).authType;\n  }\n\n  if(typeof params.type === 'undefined'){\n    return res.badRequest('You must specify a type parameter.');\n  }\n\n  if(waterlock.methods.hasOwnProperty(params.type)){\n    // call the login function of the correct auth type\n    waterlock.methods[params.type].actions.register(req, res);\n  }else{\n    return res.badRequest('unknown/invalid authentication type');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/controllers/AuthController.js":"/**\n * AuthController\n *\n * @module      :: Controller\n * @description\t:: Provides the base authentication\n *                 actions used to make waterlock work.\n *\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = require('waterlock').waterlocked({\n  /* e.g.\n    action: function(req, res){\n  \n    }\n  */\n\n});","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/controllers/UserController.js":"/**\n * UserController.js \n * \n * @module      :: Controller\n * @description :: Provides the base user\n *                 actions used to make waterlock work.\n *                 \n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = require('waterlock').actions.user({\n  /* e.g.\n    action: function(req, res){\n  \n    }\n  */\n});","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/models/Attempt.js":"/**\n * Attempt\n *\n * @module      :: Model\n * @description :: Tracks login attempts of users on your app.\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = {\n\n  attributes: require('waterlock').models.attempt.attributes({\n    \n    /* e.g.\n    nickname: 'string'\n    */\n    \n  })\n};","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/models/Auth.js":"/**\n * Auth\n *\n * @module      :: Model\n * @description :: Holds all authentication methods for a User\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = {\n\n  attributes: require('waterlock').models.auth.attributes({\n    \n    /* e.g.\n    nickname: 'string'\n    */\n    \n  }),\n  \n  beforeCreate: require('waterlock').models.auth.beforeCreate,\n  beforeUpdate: require('waterlock').models.auth.beforeUpdate\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/models/Jwt.js":"/**\n * Jwt\n *\n * @module      :: Model\n * @description :: Holds all distributed json web tokens\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = {\n\n  attributes: require('waterlock').models.jwt.attributes({\n    \n    /* e.g.\n    nickname: 'string'\n    */\n    \n  })\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/models/Use.js":"/**\n * Use\n *\n * @module      :: Model\n * @description :: Tracks the usage of a given Jwt\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = {\n\n  attributes: require('waterlock').models.use.attributes({\n    \n    /* e.g.\n    nickname: 'string'\n    */\n    \n  })\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/models/User.js":"/**\n * User\n *\n * @module      :: Model\n * @description :: This is the base user model\n * @docs        :: http://waterlock.ninja/documentation\n */\n\nmodule.exports = {\n\n  attributes: require('waterlock').models.user.attributes({\n    \n    /* e.g.\n    nickname: 'string'\n    */\n    \n  }),\n  \n  beforeCreate: require('waterlock').models.user.beforeCreate,\n  beforeUpdate: require('waterlock').models.user.beforeUpdate\n};\n","/home/travis/build/npmtest/node-npmtest-waterlock/node_modules/waterlock/lib/templates/policies/hasJsonWebToken.js":"'use strict';\n/* jshint unused:false */\n\n/**\n * hasJsonWebToken\n *\n * @module      :: Policy\n * @description :: Assumes that your request has an jwt;\n *\n * @docs        :: http://waterlock.ninja/documentation\n */\nmodule.exports = function(req, res, next) {\n  waterlock.validator.validateTokenRequest(req, function(err, user){\n    if(err){\n      return res.forbidden(err);  \n    }\n\n    // valid request\n    next();\n  });\n};\n"}